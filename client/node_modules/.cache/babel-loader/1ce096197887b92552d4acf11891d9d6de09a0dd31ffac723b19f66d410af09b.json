{"ast":null,"code":"// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n'use strict';\n\nconst childProcess = require('child_process');\nconst {\n  isLinux,\n  getReport\n} = require('./process');\nconst {\n  LDD_PATH,\n  readFile,\n  readFileSync\n} = require('./filesystem');\nlet cachedFamilyFilesystem;\nlet cachedVersionFilesystem;\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\nlet commandOut = '';\nconst safeCommand = () => {\n  if (!commandOut) {\n    return new Promise(resolve => {\n      childProcess.exec(command, (err, out) => {\n        commandOut = err ? ' ' : out;\n        resolve(commandOut);\n      });\n    });\n  }\n  return commandOut;\n};\nconst safeCommandSync = () => {\n  if (!commandOut) {\n    try {\n      commandOut = childProcess.execSync(command, {\n        encoding: 'utf8'\n      });\n    } catch (_err) {\n      commandOut = ' ';\n    }\n  }\n  return commandOut;\n};\n\n/**\r\n * A String constant containing the value `glibc`.\r\n * @type {string}\r\n * @public\r\n */\nconst GLIBC = 'glibc';\n\n/**\r\n * A Regexp constant to get the GLIBC Version.\r\n * @type {string}\r\n */\nconst RE_GLIBC_VERSION = /LIBC[a-z0-9 \\-).]*?(\\d+\\.\\d+)/i;\n\n/**\r\n * A String constant containing the value `musl`.\r\n * @type {string}\r\n * @public\r\n */\nconst MUSL = 'musl';\nconst isFileMusl = f => f.includes('libc.musl-') || f.includes('ld-musl-');\nconst familyFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return GLIBC;\n  }\n  if (Array.isArray(report.sharedObjects)) {\n    if (report.sharedObjects.some(isFileMusl)) {\n      return MUSL;\n    }\n  }\n  return null;\n};\nconst familyFromCommand = out => {\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return GLIBC;\n  }\n  if (ldd1 && ldd1.includes(MUSL)) {\n    return MUSL;\n  }\n  return null;\n};\nconst getFamilyFromLddContent = content => {\n  if (content.includes('musl')) {\n    return MUSL;\n  }\n  if (content.includes('GNU C Library')) {\n    return GLIBC;\n  }\n  return null;\n};\nconst familyFromFilesystem = async () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n  cachedFamilyFilesystem = null;\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n  return cachedFamilyFilesystem;\n};\nconst familyFromFilesystemSync = () => {\n  if (cachedFamilyFilesystem !== undefined) {\n    return cachedFamilyFilesystem;\n  }\n  cachedFamilyFilesystem = null;\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n  } catch (e) {}\n  return cachedFamilyFilesystem;\n};\n\n/**\r\n * Resolves with the libc family when it can be determined, `null` otherwise.\r\n * @returns {Promise<?string>}\r\n */\nconst family = async () => {\n  let family = null;\n  if (isLinux()) {\n    family = await familyFromFilesystem();\n    if (!family) {\n      family = familyFromReport();\n    }\n    if (!family) {\n      const out = await safeCommand();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\r\n * Returns the libc family when it can be determined, `null` otherwise.\r\n * @returns {?string}\r\n */\nconst familySync = () => {\n  let family = null;\n  if (isLinux()) {\n    family = familyFromFilesystemSync();\n    if (!family) {\n      family = familyFromReport();\n    }\n    if (!family) {\n      const out = safeCommandSync();\n      family = familyFromCommand(out);\n    }\n  }\n  return family;\n};\n\n/**\r\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\r\n * @returns {Promise<boolean>}\r\n */\nconst isNonGlibcLinux = async () => isLinux() && (await family()) !== GLIBC;\n\n/**\r\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\r\n * @returns {boolean}\r\n */\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\nconst versionFromFilesystem = async () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n  cachedVersionFilesystem = null;\n  try {\n    const lddContent = await readFile(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n  return cachedVersionFilesystem;\n};\nconst versionFromFilesystemSync = () => {\n  if (cachedVersionFilesystem !== undefined) {\n    return cachedVersionFilesystem;\n  }\n  cachedVersionFilesystem = null;\n  try {\n    const lddContent = readFileSync(LDD_PATH);\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n    if (versionMatch) {\n      cachedVersionFilesystem = versionMatch[1];\n    }\n  } catch (e) {}\n  return cachedVersionFilesystem;\n};\nconst versionFromReport = () => {\n  const report = getReport();\n  if (report.header && report.header.glibcVersionRuntime) {\n    return report.header.glibcVersionRuntime;\n  }\n  return null;\n};\nconst versionSuffix = s => s.trim().split(/\\s+/)[1];\nconst versionFromCommand = out => {\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n  if (getconf && getconf.includes(GLIBC)) {\n    return versionSuffix(getconf);\n  }\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n    return versionSuffix(ldd2);\n  }\n  return null;\n};\n\n/**\r\n * Resolves with the libc version when it can be determined, `null` otherwise.\r\n * @returns {Promise<?string>}\r\n */\nconst version = async () => {\n  let version = null;\n  if (isLinux()) {\n    version = await versionFromFilesystem();\n    if (!version) {\n      version = versionFromReport();\n    }\n    if (!version) {\n      const out = await safeCommand();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\n\n/**\r\n * Returns the libc version when it can be determined, `null` otherwise.\r\n * @returns {?string}\r\n */\nconst versionSync = () => {\n  let version = null;\n  if (isLinux()) {\n    version = versionFromFilesystemSync();\n    if (!version) {\n      version = versionFromReport();\n    }\n    if (!version) {\n      const out = safeCommandSync();\n      version = versionFromCommand(out);\n    }\n  }\n  return version;\n};\nmodule.exports = {\n  GLIBC,\n  MUSL,\n  family,\n  familySync,\n  isNonGlibcLinux,\n  isNonGlibcLinuxSync,\n  version,\n  versionSync\n};","map":{"version":3,"names":["childProcess","require","isLinux","getReport","LDD_PATH","readFile","readFileSync","cachedFamilyFilesystem","cachedVersionFilesystem","command","commandOut","safeCommand","Promise","resolve","exec","err","out","safeCommandSync","execSync","encoding","_err","GLIBC","RE_GLIBC_VERSION","MUSL","isFileMusl","f","includes","familyFromReport","report","header","glibcVersionRuntime","Array","isArray","sharedObjects","some","familyFromCommand","getconf","ldd1","split","getFamilyFromLddContent","content","familyFromFilesystem","undefined","lddContent","e","familyFromFilesystemSync","family","familySync","isNonGlibcLinux","isNonGlibcLinuxSync","versionFromFilesystem","versionMatch","match","versionFromFilesystemSync","versionFromReport","versionSuffix","s","trim","versionFromCommand","ldd2","version","versionSync","module","exports"],"sources":["C:/Users/Lyss/Documents/CEN3031/GamePlan/node_modules/detect-libc/lib/detect-libc.js"],"sourcesContent":["// Copyright 2017 Lovell Fuller and others.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n'use strict';\r\n\r\nconst childProcess = require('child_process');\r\nconst { isLinux, getReport } = require('./process');\r\nconst { LDD_PATH, readFile, readFileSync } = require('./filesystem');\r\n\r\nlet cachedFamilyFilesystem;\r\nlet cachedVersionFilesystem;\r\n\r\nconst command = 'getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true';\r\nlet commandOut = '';\r\n\r\nconst safeCommand = () => {\r\n  if (!commandOut) {\r\n    return new Promise((resolve) => {\r\n      childProcess.exec(command, (err, out) => {\r\n        commandOut = err ? ' ' : out;\r\n        resolve(commandOut);\r\n      });\r\n    });\r\n  }\r\n  return commandOut;\r\n};\r\n\r\nconst safeCommandSync = () => {\r\n  if (!commandOut) {\r\n    try {\r\n      commandOut = childProcess.execSync(command, { encoding: 'utf8' });\r\n    } catch (_err) {\r\n      commandOut = ' ';\r\n    }\r\n  }\r\n  return commandOut;\r\n};\r\n\r\n/**\r\n * A String constant containing the value `glibc`.\r\n * @type {string}\r\n * @public\r\n */\r\nconst GLIBC = 'glibc';\r\n\r\n/**\r\n * A Regexp constant to get the GLIBC Version.\r\n * @type {string}\r\n */\r\nconst RE_GLIBC_VERSION = /LIBC[a-z0-9 \\-).]*?(\\d+\\.\\d+)/i;\r\n\r\n/**\r\n * A String constant containing the value `musl`.\r\n * @type {string}\r\n * @public\r\n */\r\nconst MUSL = 'musl';\r\n\r\nconst isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-');\r\n\r\nconst familyFromReport = () => {\r\n  const report = getReport();\r\n  if (report.header && report.header.glibcVersionRuntime) {\r\n    return GLIBC;\r\n  }\r\n  if (Array.isArray(report.sharedObjects)) {\r\n    if (report.sharedObjects.some(isFileMusl)) {\r\n      return MUSL;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nconst familyFromCommand = (out) => {\r\n  const [getconf, ldd1] = out.split(/[\\r\\n]+/);\r\n  if (getconf && getconf.includes(GLIBC)) {\r\n    return GLIBC;\r\n  }\r\n  if (ldd1 && ldd1.includes(MUSL)) {\r\n    return MUSL;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getFamilyFromLddContent = (content) => {\r\n  if (content.includes('musl')) {\r\n    return MUSL;\r\n  }\r\n  if (content.includes('GNU C Library')) {\r\n    return GLIBC;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst familyFromFilesystem = async () => {\r\n  if (cachedFamilyFilesystem !== undefined) {\r\n    return cachedFamilyFilesystem;\r\n  }\r\n  cachedFamilyFilesystem = null;\r\n  try {\r\n    const lddContent = await readFile(LDD_PATH);\r\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\r\n  } catch (e) {}\r\n  return cachedFamilyFilesystem;\r\n};\r\n\r\nconst familyFromFilesystemSync = () => {\r\n  if (cachedFamilyFilesystem !== undefined) {\r\n    return cachedFamilyFilesystem;\r\n  }\r\n  cachedFamilyFilesystem = null;\r\n  try {\r\n    const lddContent = readFileSync(LDD_PATH);\r\n    cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\r\n  } catch (e) {}\r\n  return cachedFamilyFilesystem;\r\n};\r\n\r\n/**\r\n * Resolves with the libc family when it can be determined, `null` otherwise.\r\n * @returns {Promise<?string>}\r\n */\r\nconst family = async () => {\r\n  let family = null;\r\n  if (isLinux()) {\r\n    family = await familyFromFilesystem();\r\n    if (!family) {\r\n      family = familyFromReport();\r\n    }\r\n    if (!family) {\r\n      const out = await safeCommand();\r\n      family = familyFromCommand(out);\r\n    }\r\n  }\r\n  return family;\r\n};\r\n\r\n/**\r\n * Returns the libc family when it can be determined, `null` otherwise.\r\n * @returns {?string}\r\n */\r\nconst familySync = () => {\r\n  let family = null;\r\n  if (isLinux()) {\r\n    family = familyFromFilesystemSync();\r\n    if (!family) {\r\n      family = familyFromReport();\r\n    }\r\n    if (!family) {\r\n      const out = safeCommandSync();\r\n      family = familyFromCommand(out);\r\n    }\r\n  }\r\n  return family;\r\n};\r\n\r\n/**\r\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\r\n * @returns {Promise<boolean>}\r\n */\r\nconst isNonGlibcLinux = async () => isLinux() && await family() !== GLIBC;\r\n\r\n/**\r\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\r\n * @returns {boolean}\r\n */\r\nconst isNonGlibcLinuxSync = () => isLinux() && familySync() !== GLIBC;\r\n\r\nconst versionFromFilesystem = async () => {\r\n  if (cachedVersionFilesystem !== undefined) {\r\n    return cachedVersionFilesystem;\r\n  }\r\n  cachedVersionFilesystem = null;\r\n  try {\r\n    const lddContent = await readFile(LDD_PATH);\r\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\r\n    if (versionMatch) {\r\n      cachedVersionFilesystem = versionMatch[1];\r\n    }\r\n  } catch (e) {}\r\n  return cachedVersionFilesystem;\r\n};\r\n\r\nconst versionFromFilesystemSync = () => {\r\n  if (cachedVersionFilesystem !== undefined) {\r\n    return cachedVersionFilesystem;\r\n  }\r\n  cachedVersionFilesystem = null;\r\n  try {\r\n    const lddContent = readFileSync(LDD_PATH);\r\n    const versionMatch = lddContent.match(RE_GLIBC_VERSION);\r\n    if (versionMatch) {\r\n      cachedVersionFilesystem = versionMatch[1];\r\n    }\r\n  } catch (e) {}\r\n  return cachedVersionFilesystem;\r\n};\r\n\r\nconst versionFromReport = () => {\r\n  const report = getReport();\r\n  if (report.header && report.header.glibcVersionRuntime) {\r\n    return report.header.glibcVersionRuntime;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst versionSuffix = (s) => s.trim().split(/\\s+/)[1];\r\n\r\nconst versionFromCommand = (out) => {\r\n  const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\r\n  if (getconf && getconf.includes(GLIBC)) {\r\n    return versionSuffix(getconf);\r\n  }\r\n  if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\r\n    return versionSuffix(ldd2);\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Resolves with the libc version when it can be determined, `null` otherwise.\r\n * @returns {Promise<?string>}\r\n */\r\nconst version = async () => {\r\n  let version = null;\r\n  if (isLinux()) {\r\n    version = await versionFromFilesystem();\r\n    if (!version) {\r\n      version = versionFromReport();\r\n    }\r\n    if (!version) {\r\n      const out = await safeCommand();\r\n      version = versionFromCommand(out);\r\n    }\r\n  }\r\n  return version;\r\n};\r\n\r\n/**\r\n * Returns the libc version when it can be determined, `null` otherwise.\r\n * @returns {?string}\r\n */\r\nconst versionSync = () => {\r\n  let version = null;\r\n  if (isLinux()) {\r\n    version = versionFromFilesystemSync();\r\n    if (!version) {\r\n      version = versionFromReport();\r\n    }\r\n    if (!version) {\r\n      const out = safeCommandSync();\r\n      version = versionFromCommand(out);\r\n    }\r\n  }\r\n  return version;\r\n};\r\n\r\nmodule.exports = {\r\n  GLIBC,\r\n  MUSL,\r\n  family,\r\n  familySync,\r\n  isNonGlibcLinux,\r\n  isNonGlibcLinuxSync,\r\n  version,\r\n  versionSync\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}