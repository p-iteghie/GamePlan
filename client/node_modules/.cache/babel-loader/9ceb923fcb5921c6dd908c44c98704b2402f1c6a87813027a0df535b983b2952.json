{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piteg\\\\source\\\\repos\\\\p-iteghie\\\\GamePlan\\\\client\\\\src\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jwtDecode } from 'jwt-decode';\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState([]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n  const [loggedInUserId, setLoggedInUserId] = useState('');\n  const [loggedInUsername, setLoggedInUsername] = useState('');\n\n  // Fetch available users when component loads\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        console.log('Decoded token:', decoded);\n        // Assuming the token has a username, store the username in the state\n        setLoggedInUserId(decoded._id); // or decoded.userId, depending on what you store in the token\n        setLoggedInUsername(decoded.username);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Fetch events from the server when the component mounts.\n    const fetchEvents = async () => {\n      const token = localStorage.getItem('token');\n      if (loggedInUsername) {\n        try {\n          const response = await fetch('http://localhost:5000/getevents', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            }\n          }); // Ensure your server endpoint is correct.\n          const data = await response.json();\n          setEvents(data);\n        } catch (error) {\n          console.error(\"Error fetching events:\", error);\n        }\n      }\n    };\n    fetchEvents();\n  }, [loggedInUsername]);\n  useEffect(() => {\n    // Filter events based on the current month and year.\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const eventsInMonth = events.filter(event => {\n      const eventStartTime = new Date(event.startTime);\n      const eventEndTime = new Date(event.endTime); // For multi-day events\n      return eventStartTime >= startOfMonth && eventStartTime <= endOfMonth ||\n      // Starts in the month\n      eventEndTime >= startOfMonth && eventEndTime <= endOfMonth ||\n      // Ends in the month\n      eventStartTime <= startOfMonth && eventEndTime >= endOfMonth // Spans entire month\n      ;\n    });\n    setFilteredEvents(eventsInMonth);\n  }, [currentDate, events]);\n  const changeMonth = direction => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\n  };\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-day\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date\",\n      children: day\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"events\",\n      children: dayEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event\",\n        children: event.title || 'No Title'\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)]\n  }, day, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n}\n_s(Calendar, \"nUwShAguMNo+miMx1gO+ryIhotc=\");\n_c = Calendar;\n;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","events","setEvents","filteredEvents","setFilteredEvents","loggedInUserId","setLoggedInUserId","loggedInUsername","setLoggedInUsername","token","localStorage","getItem","decoded","console","log","_id","username","error","fetchEvents","response","fetch","method","headers","data","json","startOfMonth","getFullYear","getMonth","endOfMonth","eventsInMonth","filter","event","eventStartTime","startTime","eventEndTime","endTime","changeMonth","direction","daysInMonth","getDate","className","children","day","fileName","_jsxFileName","lineNumber","columnNumber","dayEvents","map","index","title","_c","$RefreshReg$"],"sources":["C:/Users/piteg/source/repos/p-iteghie/GamePlan/client/src/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\r\n\r\nfunction Calendar() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [events, setEvents] = useState([]);\r\n    const [filteredEvents, setFilteredEvents] = useState([]);\r\n    const [loggedInUserId, setLoggedInUserId] = useState('');\r\n    const [loggedInUsername, setLoggedInUsername] = useState('');\r\n\r\n    // Fetch available users when component loads\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            try {\r\n                const decoded = jwtDecode(token);\r\n                console.log('Decoded token:', decoded);\r\n                // Assuming the token has a username, store the username in the state\r\n                setLoggedInUserId(decoded._id);  // or decoded.userId, depending on what you store in the token\r\n                setLoggedInUsername(decoded.username);\r\n            } catch (error) {\r\n                console.error('Error decoding token:', error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch events from the server when the component mounts.\r\n      const fetchEvents = async () => {\r\n          const token = localStorage.getItem('token');\r\n          if (loggedInUsername) {\r\n              try {\r\n                  const response = await fetch('http://localhost:5000/getevents', {\r\n                      method: 'GET',\r\n                      headers: {\r\n                          'Content-Type': 'application/json',\r\n                          'Authorization': `Bearer ${token}`,\r\n                      },\r\n                  }); // Ensure your server endpoint is correct.\r\n                  const data = await response.json();\r\n                  setEvents(data);\r\n              } catch (error) {\r\n                  console.error(\"Error fetching events:\", error);\r\n              }\r\n          }\r\n      \r\n    };\r\n\r\n    fetchEvents();\r\n  }, [loggedInUsername]);\r\n\r\n  useEffect(() => {\r\n    // Filter events based on the current month and year.\r\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n      const eventsInMonth = events.filter(event => {\r\n          const eventStartTime = new Date(event.startTime);\r\n          const eventEndTime = new Date(event.endTime); // For multi-day events\r\n          return (\r\n              (eventStartTime >= startOfMonth && eventStartTime <= endOfMonth) || // Starts in the month\r\n              (eventEndTime >= startOfMonth && eventEndTime <= endOfMonth) || // Ends in the month\r\n              (eventStartTime <= startOfMonth && eventEndTime >= endOfMonth) // Spans entire month\r\n          );\r\n      });\r\n\r\n    setFilteredEvents(eventsInMonth);\r\n  }, [currentDate, events]);\r\n\r\n  const changeMonth = (direction) => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\r\n  };\r\n\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n\r\n  return (\r\n      <div className=\"calendar-day\" key={day}>\r\n          <div className=\"date\">{day}</div>\r\n          <div className=\"events\">\r\n              {dayEvents.map((event, index) => (\r\n                  <div className=\"event\" key={index}>\r\n                      {event.title || 'No Title'}\r\n                  </div>\r\n              ))}\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}