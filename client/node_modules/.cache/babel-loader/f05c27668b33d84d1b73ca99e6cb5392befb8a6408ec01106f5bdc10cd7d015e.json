{"ast":null,"code":"const mongoose = require(\"mongoose\");\nconst bcrypt = require('bcrypt');\nconst UserSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\n\n// Hash password before saving user to the database\nUserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n  try {\n    const saltRounds = 10;\n    this.password = await bcrypt.hash(this.password, saltRounds);\n    next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n// Compare provided password with stored hashed password\nUserSchema.methods.comparePassword = async function (password) {\n  return await bcrypt.compare(password, this.password);\n};\nmodule.exports = mongoose.model('User', UserSchema);\nmodule.exports = User;","map":{"version":3,"names":["mongoose","require","bcrypt","UserSchema","Schema","username","type","String","required","unique","password","pre","next","isModified","saltRounds","hash","error","methods","comparePassword","compare","module","exports","model","User"],"sources":["C:/Users/Lyss/Documents/CEN3031/GamePlan/client/src/loginDB/UserModel.js"],"sourcesContent":["const mongoose = require(\"mongoose\");\r\nconst bcrypt = require('bcrypt');\r\nconst UserSchema = new mongoose.Schema(\r\n    {\r\n    username: {\r\n        type: String,\r\n        required: true,\r\n        unique: true\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n\r\n\r\n    });\r\n\r\n// Hash password before saving user to the database\r\nUserSchema.pre('save', async function (next) {\r\n    if (!this.isModified('password')) {\r\n      return next();\r\n    }\r\n    try {\r\n      const saltRounds = 10;\r\n      this.password = await bcrypt.hash(this.password, saltRounds);\r\n      next();\r\n    } catch (error) {\r\n      return next(error);\r\n    }\r\n  });\r\n  \r\n  // Compare provided password with stored hashed password\r\n  UserSchema.methods.comparePassword = async function (password) {\r\n    return await bcrypt.compare(password, this.password);\r\n  };\r\n  \r\n  module.exports = mongoose.model('User', UserSchema);\r\n\r\nmodule.exports = User;"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAM,CAClC;EACAC,QAAQ,EAAE;IACNC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACNJ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACd;AAGA,CAAC,CAAC;;AAEN;AACAL,UAAU,CAACQ,GAAG,CAAC,MAAM,EAAE,gBAAgBC,IAAI,EAAE;EACzC,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IAChC,OAAOD,IAAI,CAAC,CAAC;EACf;EACA,IAAI;IACF,MAAME,UAAU,GAAG,EAAE;IACrB,IAAI,CAACJ,QAAQ,GAAG,MAAMR,MAAM,CAACa,IAAI,CAAC,IAAI,CAACL,QAAQ,EAAEI,UAAU,CAAC;IAC5DF,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOJ,IAAI,CAACI,KAAK,CAAC;EACpB;AACF,CAAC,CAAC;;AAEF;AACAb,UAAU,CAACc,OAAO,CAACC,eAAe,GAAG,gBAAgBR,QAAQ,EAAE;EAC7D,OAAO,MAAMR,MAAM,CAACiB,OAAO,CAACT,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAAC;AACtD,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAGrB,QAAQ,CAACsB,KAAK,CAAC,MAAM,EAAEnB,UAAU,CAAC;AAErDiB,MAAM,CAACC,OAAO,GAAGE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}