{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piteg\\\\source\\\\repos\\\\p-iteghie\\\\GamePlan\\\\client\\\\src\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jwtDecode } from 'jwt-decode';\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState([]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n  const [loggedInUserId, setLoggedInUserId] = useState('');\n  const [loggedInUsername, setLoggedInUsername] = useState('');\n\n  // Fetch available users when component loads\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        console.log('Decoded token:', decoded);\n        // Assuming the token has a username, store the username in the state\n        setLoggedInUserId(decoded._id); // or decoded.userId, depending on what you store in the token\n        setLoggedInUsername(decoded.username);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    // Fetch events from the server when the component mounts.\n    const fetchEvents = async () => {\n      const token = localStorage.getItem('token');\n      if (loggedInUsername) {\n        try {\n          const response = await fetch('http://localhost:5000/getevents', {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            }\n          }); // Ensure your server endpoint is correct.\n          const data = await response.json();\n          setEvents(data);\n        } catch (error) {\n          console.error(\"Error fetching events:\", error);\n        }\n      }\n    };\n    fetchEvents();\n  }, [loggedInUsername]);\n  useEffect(() => {\n    // Filter events based on the current month and year.\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    const eventsInMonth = events.filter(event => {\n      const eventStartTime = new Date(event.startTime);\n      const eventEndTime = new Date(event.endTime); // For multi-day events\n      return eventStartTime >= startOfMonth && eventStartTime <= endOfMonth ||\n      // Starts in the month\n      eventEndTime >= startOfMonth && eventEndTime <= endOfMonth ||\n      // Ends in the month\n      eventStartTime <= startOfMonth && eventEndTime >= endOfMonth // Spans entire month\n      ;\n    });\n    setFilteredEvents(eventsInMonth);\n  }, [currentDate, events]);\n  const changeMonth = direction => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\n  };\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  const getColorByObjectId = objectId => {\n    const charSum = objectId.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0); // Sum of character codes\n\n    // Step 2: Map the numeric value to a hue (0-360)\n    const hue = charSum * 1.83 % 360;\n    return `hsl(${hue}, 80%, 65%)`; // Generate a pastel color\n  };\n  const getHoverColorByObjectId = objectId => {\n    const charSum = objectId.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0); // Sum of character codes\n\n    // Step 2: Map the numeric value to a hue (0-360)\n    const hue = charSum * 1.83 % 360;\n    return `hsl(${hue}, 50%, 55%)`; // Generate a pastel color\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GamePlan Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeMonth(-1),\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [currentDate.toLocaleString(\"default\", {\n            month: \"long\"\n          }), \" \", currentDate.getFullYear()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeMonth(1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: Array.from({\n          length: daysInMonth\n        }, (_, i) => {\n          const day = i + 1; // Calendar days start from 1\n\n          // Get the date for the current calendar day\n          const currentDayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n\n          // Filter the events for this day\n          const dayEvents = filteredEvents.filter(event => {\n            const eventStartTime = new Date(event.startTime);\n            const eventEndTime = new Date(event.endTime);\n\n            // Ensure events spanning multiple days (or starting on this day) are displayed\n            return (\n              // If the event starts on or before the current day and ends on or after this day\n              eventStartTime <= currentDayDate && eventEndTime >= currentDayDate ||\n              // If the event starts before the current day and ends on or after the current day (spans the day)\n              eventStartTime < currentDayDate && eventEndTime >= currentDayDate ||\n              // Special case: If the event starts on this day and the end time is in the future\n              eventStartTime.getDate() === currentDayDate.getDate() && eventStartTime.getMonth() === currentDayDate.getMonth()\n            );\n          });\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-day\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"events\",\n              children: dayEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"event\",\n                style: {\n                  backgroundColor: getColorByObjectId(event._id),\n                  transition: \"background-color 0.2s ease\"\n                },\n                onMouseEnter: e => e.currentTarget.style.backgroundColor = getHoverColorByObjectId(event._id),\n                onMouseLeave: e => e.currentTarget.style.backgroundColor = getColorByObjectId(event._id),\n                children: event.title || \"No Title\"\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 33\n            }, this)]\n          }, day, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Event Data (Raw):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(events, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Filtered Event Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(filteredEvents, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(Calendar, \"nUwShAguMNo+miMx1gO+ryIhotc=\");\n_c = Calendar;\n;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","events","setEvents","filteredEvents","setFilteredEvents","loggedInUserId","setLoggedInUserId","loggedInUsername","setLoggedInUsername","token","localStorage","getItem","decoded","console","log","_id","username","error","fetchEvents","response","fetch","method","headers","data","json","startOfMonth","getFullYear","getMonth","endOfMonth","eventsInMonth","filter","event","eventStartTime","startTime","eventEndTime","endTime","changeMonth","direction","daysInMonth","getDate","getColorByObjectId","objectId","charSum","split","reduce","sum","char","charCodeAt","hue","getHoverColorByObjectId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleString","month","Array","from","length","_","i","day","currentDayDate","dayEvents","map","index","style","backgroundColor","transition","onMouseEnter","e","currentTarget","onMouseLeave","title","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/piteg/source/repos/p-iteghie/GamePlan/client/src/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\r\n\r\nfunction Calendar() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [events, setEvents] = useState([]);\r\n    const [filteredEvents, setFilteredEvents] = useState([]);\r\n    const [loggedInUserId, setLoggedInUserId] = useState('');\r\n    const [loggedInUsername, setLoggedInUsername] = useState('');\r\n\r\n    // Fetch available users when component loads\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            try {\r\n                const decoded = jwtDecode(token);\r\n                console.log('Decoded token:', decoded);\r\n                // Assuming the token has a username, store the username in the state\r\n                setLoggedInUserId(decoded._id);  // or decoded.userId, depending on what you store in the token\r\n                setLoggedInUsername(decoded.username);\r\n            } catch (error) {\r\n                console.error('Error decoding token:', error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch events from the server when the component mounts.\r\n      const fetchEvents = async () => {\r\n          const token = localStorage.getItem('token');\r\n          if (loggedInUsername) {\r\n              try {\r\n                  const response = await fetch('http://localhost:5000/getevents', {\r\n                      method: 'GET',\r\n                      headers: {\r\n                          'Content-Type': 'application/json',\r\n                          'Authorization': `Bearer ${token}`,\r\n                      },\r\n                  }); // Ensure your server endpoint is correct.\r\n                  const data = await response.json();\r\n                  setEvents(data);\r\n              } catch (error) {\r\n                  console.error(\"Error fetching events:\", error);\r\n              }\r\n          }\r\n      \r\n    };\r\n\r\n    fetchEvents();\r\n  }, [loggedInUsername]);\r\n\r\n  useEffect(() => {\r\n    // Filter events based on the current month and year.\r\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n      const eventsInMonth = events.filter(event => {\r\n          const eventStartTime = new Date(event.startTime);\r\n          const eventEndTime = new Date(event.endTime); // For multi-day events\r\n          return (\r\n              (eventStartTime >= startOfMonth && eventStartTime <= endOfMonth) || // Starts in the month\r\n              (eventEndTime >= startOfMonth && eventEndTime <= endOfMonth) || // Ends in the month\r\n              (eventStartTime <= startOfMonth && eventEndTime >= endOfMonth) // Spans entire month\r\n          );\r\n      });\r\n\r\n    setFilteredEvents(eventsInMonth);\r\n  }, [currentDate, events]);\r\n\r\n  const changeMonth = (direction) => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\r\n  };\r\n\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n\r\n    const getColorByObjectId = (objectId) => {\r\n        const charSum = objectId\r\n            .split('')\r\n            .reduce((sum, char) => sum + char.charCodeAt(0), 0); // Sum of character codes\r\n\r\n        // Step 2: Map the numeric value to a hue (0-360)\r\n        const hue = charSum*1.83 % 360;\r\n        return `hsl(${hue}, 80%, 65%)`; // Generate a pastel color\r\n    };\r\n    const getHoverColorByObjectId = (objectId) => {\r\n        const charSum = objectId\r\n            .split('')\r\n            .reduce((sum, char) => sum + char.charCodeAt(0), 0); // Sum of character codes\r\n\r\n        // Step 2: Map the numeric value to a hue (0-360)\r\n        const hue = charSum * 1.83 % 360;\r\n        return `hsl(${hue}, 50%, 55%)`; // Generate a pastel color\r\n    };\r\n\r\n    return (\r\n        <div className=\"Calendar\">\r\n            <h1>GamePlan Calendar</h1>\r\n\r\n            {/* Calendar UI */}\r\n            <div className=\"calendar-container\">\r\n                <header>\r\n                    <button onClick={() => changeMonth(-1)}>Previous</button>\r\n                    <h2>\r\n                        {currentDate.toLocaleString(\"default\", { month: \"long\" })} {currentDate.getFullYear()}\r\n                    </h2>\r\n                    <button onClick={() => changeMonth(1)}>Next</button>\r\n                </header>\r\n\r\n                <div className=\"calendar-grid\">\r\n                    {Array.from({ length: daysInMonth }, (_, i) => {\r\n                        const day = i + 1; // Calendar days start from 1\r\n\r\n                        // Get the date for the current calendar day\r\n                        const currentDayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n\r\n                        // Filter the events for this day\r\n                        const dayEvents = filteredEvents.filter(event => {\r\n                            const eventStartTime = new Date(event.startTime);\r\n                            const eventEndTime = new Date(event.endTime);\r\n\r\n                            // Ensure events spanning multiple days (or starting on this day) are displayed\r\n                            return (\r\n                                // If the event starts on or before the current day and ends on or after this day\r\n                                (eventStartTime <= currentDayDate && eventEndTime >= currentDayDate) ||\r\n                                // If the event starts before the current day and ends on or after the current day (spans the day)\r\n                                (eventStartTime < currentDayDate && eventEndTime >= currentDayDate) ||\r\n                                // Special case: If the event starts on this day and the end time is in the future\r\n                                (eventStartTime.getDate() === currentDayDate.getDate() && eventStartTime.getMonth() === currentDayDate.getMonth())\r\n                            );\r\n                        });\r\n\r\n                        return (\r\n                            <div className=\"calendar-day\" key={day}>\r\n                                <div className=\"date\">{day}</div>\r\n                                <div className=\"events\">\r\n                                    {dayEvents.map((event, index) => (\r\n                                        <div className=\"event\" key={index} style={{\r\n                                            backgroundColor: getColorByObjectId(event._id),\r\n                                            transition: \"background-color 0.2s ease\", }} onMouseEnter={(e) => e.currentTarget.style.backgroundColor = getHoverColorByObjectId(event._id)}\r\n                                            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = getColorByObjectId(event._id)}>\r\n                                            {event.title || \"No Title\"}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            {/* Debug panels for events */}\r\n            <div></div>\r\n            <div>\r\n                <h3>Event Data (Raw):</h3>\r\n                <pre>{JSON.stringify(events, null, 2)}</pre>\r\n            </div>\r\n            <div>\r\n                <h3>Filtered Event Data:</h3>\r\n                <pre>{JSON.stringify(filteredEvents, null, 2)}</pre>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}