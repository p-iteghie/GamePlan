{"ast":null,"code":"const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\n\n// Hash the password before saving it to the database\nuserSchema.pre('save', async function (next) {\n  const user = this;\n  if (!user.isModified('password')) return next();\n  try {\n    const salt = await bcrypt.genSalt();\n    user.password = await bcrypt.hash(user.password, salt);\n    next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n// Compare the given password with the hashed password in the database\nuserSchema.methods.comparePassword = async function (password) {\n  return bcrypt.compare(password, this.password);\n};\nconst User = mongoose.model('User', userSchema);\nmodule.exports = User;","map":{"version":3,"names":["mongoose","require","bcrypt","userSchema","Schema","username","type","String","required","unique","password","timestamps","pre","next","user","isModified","salt","genSalt","hash","error","methods","comparePassword","compare","User","model","module","exports"],"sources":["C:/Users/piteg/source/repos/p-iteghie/GamePlan/client/src/models/User.js"],"sourcesContent":["const mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      unique: true\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Hash the password before saving it to the database\r\nuserSchema.pre('save', async function (next) {\r\n  const user = this;\r\n  if (!user.isModified('password')) return next();\r\n\r\n  try {\r\n    const salt = await bcrypt.genSalt();\r\n    user.password = await bcrypt.hash(user.password, salt);\r\n    next();\r\n  } catch (error) {\r\n    return next(error);\r\n  }\r\n});\r\n\r\n// Compare the given password with the hashed password in the database\r\nuserSchema.methods.comparePassword = async function (password) {\r\n  return bcrypt.compare(password, this.password);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nmodule.exports = User;"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAME,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAM,CACpC;EACEC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRJ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ;AACF,CAAC,EACD;EAAEG,UAAU,EAAE;AAAK,CACrB,CAAC;;AAED;AACAR,UAAU,CAACS,GAAG,CAAC,MAAM,EAAE,gBAAgBC,IAAI,EAAE;EAC3C,MAAMC,IAAI,GAAG,IAAI;EACjB,IAAI,CAACA,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE,OAAOF,IAAI,CAAC,CAAC;EAE/C,IAAI;IACF,MAAMG,IAAI,GAAG,MAAMd,MAAM,CAACe,OAAO,CAAC,CAAC;IACnCH,IAAI,CAACJ,QAAQ,GAAG,MAAMR,MAAM,CAACgB,IAAI,CAACJ,IAAI,CAACJ,QAAQ,EAAEM,IAAI,CAAC;IACtDH,IAAI,CAAC,CAAC;EACR,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,OAAON,IAAI,CAACM,KAAK,CAAC;EACpB;AACF,CAAC,CAAC;;AAEF;AACAhB,UAAU,CAACiB,OAAO,CAACC,eAAe,GAAG,gBAAgBX,QAAQ,EAAE;EAC7D,OAAOR,MAAM,CAACoB,OAAO,CAACZ,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAAC;AAChD,CAAC;AAED,MAAMa,IAAI,GAAGvB,QAAQ,CAACwB,KAAK,CAAC,MAAM,EAAErB,UAAU,CAAC;AAE/CsB,MAAM,CAACC,OAAO,GAAGH,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}