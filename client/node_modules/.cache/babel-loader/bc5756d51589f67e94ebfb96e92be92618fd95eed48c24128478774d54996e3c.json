{"ast":null,"code":"module.exports = exports = abbrev.abbrev = abbrev;\nabbrev.monkeyPatch = monkeyPatch;\nfunction monkeyPatch() {\n  Object.defineProperty(Array.prototype, 'abbrev', {\n    value: function () {\n      return abbrev(this);\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n  Object.defineProperty(Object.prototype, 'abbrev', {\n    value: function () {\n      return abbrev(Object.keys(this));\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n}\nfunction abbrev(list) {\n  if (arguments.length !== 1 || !Array.isArray(list)) {\n    list = Array.prototype.slice.call(arguments, 0);\n  }\n  for (var i = 0, l = list.length, args = []; i < l; i++) {\n    args[i] = typeof list[i] === \"string\" ? list[i] : String(list[i]);\n  }\n\n  // sort them lexicographically, so that they're next to their nearest kin\n  args = args.sort(lexSort);\n\n  // walk through each, seeing how much it has in common with the next and previous\n  var abbrevs = {},\n    prev = \"\";\n  for (var i = 0, l = args.length; i < l; i++) {\n    var current = args[i],\n      next = args[i + 1] || \"\",\n      nextMatches = true,\n      prevMatches = true;\n    if (current === next) continue;\n    for (var j = 0, cl = current.length; j < cl; j++) {\n      var curChar = current.charAt(j);\n      nextMatches = nextMatches && curChar === next.charAt(j);\n      prevMatches = prevMatches && curChar === prev.charAt(j);\n      if (!nextMatches && !prevMatches) {\n        j++;\n        break;\n      }\n    }\n    prev = current;\n    if (j === cl) {\n      abbrevs[current] = current;\n      continue;\n    }\n    for (var a = current.substr(0, j); j <= cl; j++) {\n      abbrevs[a] = current;\n      a += current.charAt(j);\n    }\n  }\n  return abbrevs;\n}\nfunction lexSort(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}","map":{"version":3,"names":["module","exports","abbrev","monkeyPatch","Object","defineProperty","Array","prototype","value","enumerable","configurable","writable","keys","list","arguments","length","isArray","slice","call","i","l","args","String","sort","lexSort","abbrevs","prev","current","next","nextMatches","prevMatches","j","cl","curChar","charAt","a","substr","b"],"sources":["C:/Users/piteg/source/repos/p-iteghie/GamePlan/node_modules/abbrev/abbrev.js"],"sourcesContent":["module.exports = exports = abbrev.abbrev = abbrev\r\n\r\nabbrev.monkeyPatch = monkeyPatch\r\n\r\nfunction monkeyPatch () {\r\n  Object.defineProperty(Array.prototype, 'abbrev', {\r\n    value: function () { return abbrev(this) },\r\n    enumerable: false, configurable: true, writable: true\r\n  })\r\n\r\n  Object.defineProperty(Object.prototype, 'abbrev', {\r\n    value: function () { return abbrev(Object.keys(this)) },\r\n    enumerable: false, configurable: true, writable: true\r\n  })\r\n}\r\n\r\nfunction abbrev (list) {\r\n  if (arguments.length !== 1 || !Array.isArray(list)) {\r\n    list = Array.prototype.slice.call(arguments, 0)\r\n  }\r\n  for (var i = 0, l = list.length, args = [] ; i < l ; i ++) {\r\n    args[i] = typeof list[i] === \"string\" ? list[i] : String(list[i])\r\n  }\r\n\r\n  // sort them lexicographically, so that they're next to their nearest kin\r\n  args = args.sort(lexSort)\r\n\r\n  // walk through each, seeing how much it has in common with the next and previous\r\n  var abbrevs = {}\r\n    , prev = \"\"\r\n  for (var i = 0, l = args.length ; i < l ; i ++) {\r\n    var current = args[i]\r\n      , next = args[i + 1] || \"\"\r\n      , nextMatches = true\r\n      , prevMatches = true\r\n    if (current === next) continue\r\n    for (var j = 0, cl = current.length ; j < cl ; j ++) {\r\n      var curChar = current.charAt(j)\r\n      nextMatches = nextMatches && curChar === next.charAt(j)\r\n      prevMatches = prevMatches && curChar === prev.charAt(j)\r\n      if (!nextMatches && !prevMatches) {\r\n        j ++\r\n        break\r\n      }\r\n    }\r\n    prev = current\r\n    if (j === cl) {\r\n      abbrevs[current] = current\r\n      continue\r\n    }\r\n    for (var a = current.substr(0, j) ; j <= cl ; j ++) {\r\n      abbrevs[a] = current\r\n      a += current.charAt(j)\r\n    }\r\n  }\r\n  return abbrevs\r\n}\r\n\r\nfunction lexSort (a, b) {\r\n  return a === b ? 0 : a > b ? 1 : -1\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}