{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyss\\\\Documents\\\\CEN3031\\\\GamePlan\\\\client\\\\src\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst User = require('./loginDB/UserModel.js');\nfunction Register() {\n  _s();\n  // Define two pieces of state: one for username and one for password\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [regMessage, setregMessage] = useState('');\n  const [passValid, setPassValid] = useState(true);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent page refresh\n\n    const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\n    if (passwordRegex.test(password)) {\n      console.log(\"Password is valid!\");\n    } else {\n      console.log(\"Password is invalid!\");\n      setregMessage(\"Password must be at least 8 characters long, include a number, and a capital letter.\");\n      setPassValid(false);\n      return; // Stop submission if validation fails\n    }\n    setregMessage('');\n    // Make a POST request with both username and password\n    const responseMessage = await fetch('http://localhost:5000/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      }) // Send both username and password\n    });\n    const data = await responseMessage.json();\n    setResponseMessage(data.message); // Assuming the server returns a message  \n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          value: username,\n          onChange: e => setUsername(e.target.value) // Update username state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value) // Update password state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), !passValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: regMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Register, \"wNrsHH157qijCOgNXcn5ntBD7xw=\");\n_c = Register;\n;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","User","require","Register","_s","username","setUsername","password","setPassword","responseMessage","setResponseMessage","regMessage","setregMessage","passValid","setPassValid","handleSubmit","e","preventDefault","passwordRegex","test","console","log","fetch","method","headers","body","JSON","stringify","data","json","message","style","padding","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","target","color","_c","$RefreshReg$"],"sources":["C:/Users/Lyss/Documents/CEN3031/GamePlan/client/src/Register.js"],"sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst User = require('./loginDB/UserModel.js');\r\n\r\nfunction Register()\r\n{\r\n    // Define two pieces of state: one for username and one for password\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n\r\n  const [regMessage, setregMessage] = useState('');\r\n  const [passValid, setPassValid] = useState(true);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();  // Prevent page refresh\r\n\r\n    const passwordRegex = /^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]{8,}$/;\r\n    if (passwordRegex.test(password)) \r\n      {\r\n      console.log(\"Password is valid!\");\r\n      } \r\n    else \r\n    {\r\n        console.log(\"Password is invalid!\");\r\n        setregMessage(\"Password must be at least 8 characters long, include a number, and a capital letter.\");\r\n        setPassValid(false);\r\n        return; // Stop submission if validation fails\r\n    }\r\n    setregMessage('');\r\n    // Make a POST request with both username and password\r\n    const responseMessage = await fetch('http://localhost:5000/register', {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ username, password }),  // Send both username and password\r\n    });\r\n\r\n    const data = await responseMessage.json();\r\n    setResponseMessage(data.message);  // Assuming the server returns a message  \r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Username input */}\r\n        <div>\r\n          <label htmlFor=\"username\">Username: </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}  // Update username state\r\n          />\r\n        </div>\r\n\r\n        {/* Password input */}\r\n        <div>\r\n          <label htmlFor=\"password\">Password: </label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}  // Update password state\r\n          />\r\n        </div>\r\n\r\n        {/* Display error message if password is invalid */}\r\n        {!passValid && <p style={{ color: 'red' }}>{regMessage}</p>}\r\n        \r\n\r\n        <button type=\"submit\">Register</button>\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}