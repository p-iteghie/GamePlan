{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piteg\\\\source\\\\repos\\\\p-iteghie\\\\GamePlan\\\\client\\\\src\\\\Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState([]);\n  const [filteredEvents, setFilteredEvents] = useState([]);\n  useEffect(() => {\n    // Fetch events from the server when the component mounts.\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/getevents'); // Ensure your server endpoint is correct.\n        const data = await response.json();\n        setEvents(data);\n      } catch (error) {\n        console.error(\"Error fetching events:\", error);\n      }\n    };\n    fetchEvents();\n  }, []);\n  useEffect(() => {\n    // Filter events based on the current month and year.\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n\n    //const eventsInMonth = events.filter(event => {\n    //const eventDate = new Date(event.date);\n    //return eventDate >= startOfMonth && eventDate <= endOfMonth;\n    //});\n\n    setFilteredEvents(eventsInMonth);\n  }, [currentDate, events]);\n  const changeMonth = direction => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\n  };\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GamePlan Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeMonth(-1),\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [currentDate.toLocaleString(\"default\", {\n            month: \"long\"\n          }), \" \", currentDate.getFullYear()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeMonth(1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: Array.from({\n          length: daysInMonth\n        }, (_, i) => {\n          const day = i + 1;\n          const dayEvents = filteredEvents.filter(event => {\n            const eventDate = new Date(event.date);\n            return eventDate.getDate() === day;\n          });\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-day\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date\",\n              children: day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"events\",\n              children: dayEvents.map((event, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"event\",\n                children: event.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)]\n          }, day, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Calendar, \"Y2yMUckpcVfk89AxbA7V/vTrkdA=\");\n_c = Calendar;\n;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","events","setEvents","filteredEvents","setFilteredEvents","fetchEvents","response","fetch","data","json","error","console","startOfMonth","getFullYear","getMonth","endOfMonth","eventsInMonth","changeMonth","direction","daysInMonth","getDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toLocaleString","month","Array","from","length","_","i","day","dayEvents","filter","event","eventDate","date","map","index","name","_c","$RefreshReg$"],"sources":["C:/Users/piteg/source/repos/p-iteghie/GamePlan/client/src/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Styles/Calendar.css\"; // Create a simple CSS file for styling.\r\n\r\nfunction Calendar() {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [events, setEvents] = useState([]);\r\n  const [filteredEvents, setFilteredEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch events from the server when the component mounts.\r\n    const fetchEvents = async () => {\r\n      try {\r\n          const response = await fetch('http://localhost:5000/getevents'); // Ensure your server endpoint is correct.\r\n        const data = await response.json();\r\n        setEvents(data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching events:\", error);\r\n      }\r\n    };\r\n\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Filter events based on the current month and year.\r\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n    //const eventsInMonth = events.filter(event => {\r\n      //const eventDate = new Date(event.date);\r\n      //return eventDate >= startOfMonth && eventDate <= endOfMonth;\r\n    //});\r\n\r\n    setFilteredEvents(eventsInMonth);\r\n  }, [currentDate, events]);\r\n\r\n  const changeMonth = (direction) => {\r\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1));\r\n  };\r\n\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n\r\n  return (\r\n    <div className=\"Calendar\">\r\n      <h1>GamePlan Calendar</h1>\r\n      <div className=\"calendar-container\">\r\n        <header>\r\n          <button onClick={() => changeMonth(-1)}>Previous</button>\r\n          <h2>\r\n            {currentDate.toLocaleString(\"default\", { month: \"long\" })} {currentDate.getFullYear()}\r\n          </h2>\r\n          <button onClick={() => changeMonth(1)}>Next</button>\r\n        </header>\r\n        <div className=\"calendar-grid\">\r\n          {Array.from({ length: daysInMonth }, (_, i) => {\r\n            const day = i + 1;\r\n            const dayEvents = filteredEvents.filter(event => {\r\n              const eventDate = new Date(event.date);\r\n              return eventDate.getDate() === day;\r\n            });\r\n\r\n            return (\r\n              <div className=\"calendar-day\" key={day}>\r\n                <div className=\"date\">{day}</div>\r\n                <div className=\"events\">\r\n                  {dayEvents.map((event, index) => (\r\n                    <div className=\"event\" key={index}>\r\n                      {event.name}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}