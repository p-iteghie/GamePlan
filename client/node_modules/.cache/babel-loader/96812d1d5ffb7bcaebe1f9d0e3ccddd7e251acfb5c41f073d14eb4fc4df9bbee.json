{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\calei\\\\GamePlan\\\\client\\\\src\\\\AddEvent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport \"./Styles/AddEvent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddEvent() {\n  _s();\n  // Define state for each event field\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [location, setLocation] = useState('');\n  const [attendees, setAttendees] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [responseMessage, setResponseMessage] = useState('');\n  const [loggedInUserId, setLoggedInUserId] = useState('');\n  const [loggedInUsername, setLoggedInUsername] = useState('');\n\n  // Fetch available users when component loads\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        console.log('Decoded token:', decoded);\n        // Assuming the token has a username, store the username in the state\n        setLoggedInUserId(decoded._id); // or decoded.userId, depending on what you store in the token\n        setLoggedInUsername(decoded.username);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (loggedInUsername) {\n      // Only fetch users if loggedInUsername is available\n      const fetchUsers = async () => {\n        try {\n          const token = localStorage.getItem('token');\n          const response = await fetch(`http://localhost:5000/get-friends`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          const data = await response.json();\n          // Filter out the logged-in user from the fetched data\n\n          setUsers(data); // Set users state with the filtered data\n        } catch (error) {\n          console.error('Error fetching users:', error);\n        }\n      };\n      fetchUsers(); // Call the function to fetch users\n    }\n  }, [loggedInUsername]);\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent page refresh\n    const token = localStorage.getItem('token');\n\n    // Make a POST request with event details\n    try {\n      const response = await fetch('http://localhost:5000/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          startTime,\n          endTime,\n          location,\n          userId: loggedInUserId,\n          // Replace with the logged-in user ID\n          attendees\n        })\n      });\n      const data = await response.json();\n      setResponseMessage(data.message || 'Event added successfully');\n    } catch (error) {\n      console.error('Error adding event:', error);\n      setResponseMessage('Error adding event');\n    }\n  };\n\n  // Update selected attendees when dropdown value changes\n  const handleAttendeeChange = e => {\n    const userId = e.target.value;\n    setAttendees(prevAttendees => {\n      const updatedAttendees = e.target.checked ? [...prevAttendees, userId] // Add user ID if checked\n      : prevAttendees.filter(id => id !== userId); // Remove user ID if unchecked\n      console.log(\"Updated attendees:\", updatedAttendees); // Log updated attendees to check\n      return updatedAttendees;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [loggedInUsername && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uppercase-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Hi, \", loggedInUsername, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          value: title,\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"startTime\",\n          children: \"Start Time: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          id: \"startTime\",\n          value: startTime,\n          onChange: e => setStartTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"endTime\",\n          children: \"End Time: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          id: \"endTime\",\n          value: endTime,\n          onChange: e => setEndTime(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"location\",\n          children: \"Location: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"location\",\n          value: location,\n          onChange: e => setLocation(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"attendees\",\n          children: \"Attendees: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: user._id,\n                onChange: handleAttendeeChange,\n                checked: attendees.includes(user._id) // Check if the user ID is in the attendees list\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 37\n              }, this), user.username]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 33\n            }, this)\n          }, user._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n\n  // server/routes/events.js\n  router.get('/user-friends-events', async (req, res) => {\n    try {\n      const {\n        userId\n      } = req.query; // Get the user ID from the query parameters\n\n      // Fetch the user's friends' IDs\n      const user = await User.findById(userId).populate('friends');\n      const friendIds = user.friends.map(friend => friend._id);\n\n      // Fetch events for the user and their friends\n      const events = await Event.find({\n        $or: [{\n          userId: userId\n        }, {\n          userId: {\n            $in: friendIds\n          }\n        }]\n      });\n      res.json(events);\n    } catch (err) {\n      console.error(err);\n      res.status(500).send('Error retrieving user and friends\\' events');\n    }\n  });\n  const EventSchema = new mongoose.Schema({\n    title: String,\n    startTime: Date,\n    endTime: Date,\n    userId: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User'\n    },\n    description: String\n  });\n}\n_s(AddEvent, \"UZm79eZSLZD/HiGL1lU2p6SYvkk=\");\n_c = AddEvent;\nexport default AddEvent;\nvar _c;\n$RefreshReg$(_c, \"AddEvent\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AddEvent","_s","title","setTitle","description","setDescription","startTime","setStartTime","endTime","setEndTime","location","setLocation","attendees","setAttendees","users","setUsers","responseMessage","setResponseMessage","loggedInUserId","setLoggedInUserId","loggedInUsername","setLoggedInUsername","token","localStorage","getItem","decoded","console","log","_id","username","error","fetchUsers","response","fetch","method","headers","data","json","handleSubmit","e","preventDefault","body","JSON","stringify","userId","message","handleAttendeeChange","target","value","prevAttendees","updatedAttendees","checked","filter","id","style","padding","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","map","user","includes","router","get","req","res","query","User","findById","populate","friendIds","friends","friend","events","Event","find","$or","$in","err","status","send","EventSchema","mongoose","Schema","String","Date","Types","ObjectId","ref","_c","$RefreshReg$"],"sources":["C:/Users/calei/GamePlan/client/src/AddEvent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport \"./Styles/AddEvent.css\";\r\n\r\nfunction AddEvent() {\r\n    // Define state for each event field\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [location, setLocation] = useState('');\r\n    const [attendees, setAttendees] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [responseMessage, setResponseMessage] = useState('');\r\n    const [loggedInUserId, setLoggedInUserId] = useState('');\r\n    const [loggedInUsername, setLoggedInUsername] = useState('');\r\n\r\n    // Fetch available users when component loads\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            try {\r\n                const decoded = jwtDecode(token);\r\n                console.log('Decoded token:', decoded);\r\n                // Assuming the token has a username, store the username in the state\r\n                setLoggedInUserId(decoded._id);  // or decoded.userId, depending on what you store in the token\r\n                setLoggedInUsername(decoded.username);\r\n            } catch (error) {\r\n                console.error('Error decoding token:', error);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (loggedInUsername) {  // Only fetch users if loggedInUsername is available\r\n            const fetchUsers = async () => {\r\n                try {\r\n                    const token = localStorage.getItem('token');\r\n                    const response = await fetch(`http://localhost:5000/get-friends`, {\r\n                        method: 'GET',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Authorization': `Bearer ${token}`,\r\n                        },\r\n                    });\r\n                    const data = await response.json();\r\n                    // Filter out the logged-in user from the fetched data\r\n\r\n                    setUsers(data); // Set users state with the filtered data\r\n                } catch (error) {\r\n                    console.error('Error fetching users:', error);\r\n                }\r\n            };\r\n\r\n            fetchUsers(); // Call the function to fetch users\r\n        }\r\n    }, [loggedInUsername]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();  // Prevent page refresh\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Make a POST request with event details\r\n        try {\r\n            const response = await fetch('http://localhost:5000/events', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`,\r\n                },\r\n                body: JSON.stringify({\r\n                    title,\r\n                    description,\r\n                    startTime,\r\n                    endTime,\r\n                    location,\r\n                    userId: loggedInUserId, // Replace with the logged-in user ID\r\n                    attendees,\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            setResponseMessage(data.message || 'Event added successfully');\r\n        } catch (error) {\r\n            console.error('Error adding event:', error);\r\n            setResponseMessage('Error adding event');\r\n        }\r\n    };\r\n\r\n    // Update selected attendees when dropdown value changes\r\n    const handleAttendeeChange = (e) => {\r\n        const userId = e.target.value;\r\n        setAttendees((prevAttendees) => {\r\n            const updatedAttendees = e.target.checked\r\n                ? [...prevAttendees, userId] // Add user ID if checked\r\n                : prevAttendees.filter((id) => id !== userId); // Remove user ID if unchecked\r\n            console.log(\"Updated attendees:\", updatedAttendees); // Log updated attendees to check\r\n            return updatedAttendees;\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div style={{ padding: '20px' }}>\r\n            {loggedInUsername && (\r\n                <div className=\"uppercase-text\">\r\n                    <h2>Hi, {loggedInUsername}!</h2> {/* Greet the logged-in user */}\r\n                </div>\r\n            )}\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"title\">Title: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"description\">Description: </label>\r\n                    <textarea\r\n                        id=\"description\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"startTime\">Start Time: </label>\r\n                    <input\r\n                        type=\"datetime-local\"\r\n                        id=\"startTime\"\r\n                        value={startTime}\r\n                        onChange={(e) => setStartTime(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"endTime\">End Time: </label>\r\n                    <input\r\n                        type=\"datetime-local\"\r\n                        id=\"endTime\"\r\n                        value={endTime}\r\n                        onChange={(e) => setEndTime(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"location\">Location: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"location\"\r\n                        value={location}\r\n                        onChange={(e) => setLocation(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"attendees\">Attendees: </label>\r\n                    <div>\r\n                        {users.map((user) => (\r\n                            <div key={user._id}>\r\n                                <label>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        value={user._id}\r\n                                        onChange={handleAttendeeChange}\r\n                                        checked={attendees.includes(user._id)} // Check if the user ID is in the attendees list\r\n                                    />\r\n                                    {user.username}\r\n                                </label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\">Add Event</button>\r\n\r\n            </form>\r\n\r\n            {responseMessage && <p>{responseMessage}</p>}\r\n        </div>\r\n    );\r\n\r\n    // server/routes/events.js\r\n    router.get('/user-friends-events', async (req, res) => {\r\n        try {\r\n            const { userId } = req.query; // Get the user ID from the query parameters\r\n\r\n            // Fetch the user's friends' IDs\r\n            const user = await User.findById(userId).populate('friends');\r\n            const friendIds = user.friends.map(friend => friend._id);\r\n\r\n            // Fetch events for the user and their friends\r\n            const events = await Event.find({\r\n                $or: [{ userId: userId }, { userId: { $in: friendIds } }]\r\n            });\r\n\r\n            res.json(events);\r\n        } catch (err) {\r\n            console.error(err);\r\n            res.status(500).send('Error retrieving user and friends\\' events');\r\n        }\r\n    });\r\n\r\n    const EventSchema = new mongoose.Schema({\r\n        title: String,\r\n        startTime: Date,\r\n        endTime: Date,\r\n        userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\r\n        description: String\r\n    });\r\n    \r\n\r\n}\r\n\r\nexport default AddEvent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}